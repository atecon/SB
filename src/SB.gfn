<?xml version="1.0" encoding="UTF-8"?>
<gretl-functions>
<gretl-function-package name="SB" no-data-ok="true" minver="2020a">
<author email="stefano.fachin@uniroma1.it">F. Di Iorio, S. Fachin, A. Tarassow, Riccardo &quot;Jack&quot; Lucchetti</author>
<version>1.4</version>
<date>2023-01-28</date>
<description>Stationary bootstrap resampling of time series</description>
<tags>C12 C15 C22 C32</tags>
<help>
This function creates bootstrap pseudo-data resampling a set of zero mean
stationary time series using the stationary bootstrap with random block size
by D.N. Politis and J.P. Romano (&quot;The Stationary Bootstrap&quot;, Journal of the
American Statistical Association, vol. 89, 1994, pp. 1303-1313).


PUBLIC FUNCTIONS:
-----------------------------------------------------------------------
Function:       SB(matrix x &quot;Data to be resampled&quot;,
                   scalar b[0::0] &quot;Mean block size&quot;)

Arguments:
x:          matrix, Data to be resampled. Rows: time periods,
            columns:variables
b:          scalar, Mean block size; if b=0 (default): use rule-of-thumb
            b = 1.75 * (T^(1/3) as in Palm, F.C., S. Smeekes,
            J.P. Urbain (2011) &quot;Cross-sectional dependence robust block
            bootstrap panel unit root tests&quot;, Journal of Econometrics, 163,
            85-104.

Return:
Matrix of I(0) bootstrap pseudo-data of the same dimensions of the input
matrix.


Note on the sample script:
==========================
Example 1 estimates 95% bootstrap confidence intervals for the cointegrating
coefficients of a relationship estimated on Johansen's Danish data supplied by
Gretl. A rather small number of re-drawings is used. In actual empirical work a
much larger number, at least 1000 and up to 5000, is recommended.
Real money, real income and the bond rate are found to be cointegrated by using
the Engle-Granger test. Hence, the OLS residuals are stationary. However, the
residuals will generally be weakly dependent, so that simple redrawing as
carried out by the Gretl function &quot;resample&quot; cannot be applied, while block
bootstrap as carried out by &quot;resample&quot; with the optional &quot;b&quot; argument would be
legitimate. However, the block bootstrap is not guaranteed to
produce stationary pseudo-residuals. This will have serious consequences in
this context.


Changelog:
1.4:
  - Remove the obsolete 3rd argument for the SB() function
  - The mean block size (b) is allowed to be a non-negative scalar value
  - Fix typos
  - Improve manual
1.3:
  - Implementation of a much faster code
  - Note: The functions SB_old1 (the initial version) and SB_old2 are
    deprecated and for pedagogic purposes only
1.2:
  - Implementation of a faster code
  - Old function still available under SBslow()
</help>
<gui-help filename="SB_help.txt">
This function creates bootstrap pseudo-data resampling a set of zero mean
stationary time series using the stationary bootstrap with random block size
by D.N. Politis and J.P. Romano (&quot;The Stationary Bootstrap&quot;, Journal of the
American Statistical Association, vol. 89, 1994, pp. 1303-1313).


PUBLIC FUNCTIONS:
-----------------------------------------------------------------------
Function:       SB(matrix x &quot;Data to be resampled&quot;,
                   scalar b[0::0] &quot;Mean block size&quot;)

Arguments:
x:          matrix, Data to be resampled. Rows: time periods,
            columns:variables
b:          scalar, Mean block size; if b=0 (default): use rule-of-thumb
            b = 1.75 * (T^(1/3) as in Palm, F.C., S. Smeekes,
            J.P. Urbain (2011) &quot;Cross-sectional dependence robust block
            bootstrap panel unit root tests&quot;, Journal of Econometrics, 163,
            85-104.

Return:
Matrix of I(0) bootstrap pseudo-data of the same dimensions of the input
matrix.


Note on the sample script:
==========================
Example 1 estimates 95% bootstrap confidence intervals for the cointegrating
coefficients of a relationship estimated on Johansen's Danish data supplied by
Gretl. A rather small number of re-drawings is used. In actual empirical work a
much larger number, at least 1000 and up to 5000, is recommended.
Real money, real income and the bond rate are found to be cointegrated by using
the Engle-Granger test. Hence, the OLS residuals are stationary. However, the
residuals will generally be weakly dependent, so that simple redrawing as
carried out by the Gretl function &quot;resample&quot; cannot be applied, while block
bootstrap as carried out by &quot;resample&quot; with the optional &quot;b&quot; argument would be
legitimate. However, the block bootstrap is not guaranteed to
produce stationary pseudo-residuals. This will have serious consequences in
this context.


Changelog:
1.4:
  - Remove the obsolete 3rd argument for the SB() function
  - The mean block size (b) is allowed to be a non-negative scalar value
  - Fix typos
  - Improve manual
1.3:
  - Implementation of a much faster code
  - Note: The functions SB_old1 (the initial version) and SB_old2 are
    deprecated and for pedagogic purposes only
1.2:
  - Implementation of a faster code
  - Old function still available under SBslow()
</gui-help>
<gretl-function name="SB" type="matrix" pkg-role="gui-main">
 <params count="2">
  <param name="x" type="matrix" const="true">
<description>Data to be resampled</description>
  </param>
  <param name="b" type="scalar" min="0" default="0">
<description>Mean block size</description>
  </param>
 </params>
<code>/* Main function doing the stationary time-series block-bootstrap. */
scalar n = rows(x)
if n == 0
  funcerr &quot;data input error, check data&quot;
endif
if b == 0
  b = 1.75 * (n^(1/3))
endif
p = 1 / b
s = seq(1, n)'
u = 1 | (muniform((n-1), 1) .&lt; p)
r = cum(u)
nr = r[n]
sub = selifr(r ~ s, u)
sub[,2] -= mrandgen(i, 1, n, nr, 1)
s -= replace(r, sub[,1], sub[,2])
s = ((s-1) % n) + 1
return x[s,]
</code>
</gretl-function>
<gretl-function name="SB_old1" type="matrix" private="1">
 <params count="2">
  <param name="x" type="matrix">
<description> data to be resampled</description>
  </param>
  <param name="b" type="scalar">
<description>block size</description>
  </param>
 </params>
<code>n=rows(x)
if n &lt;= 0
  funcerr &quot;data input error, check data&quot;
else
  if b &lt; 0
    funcerr &quot;block input error, check mean block size&quot;
  else
    if b==0
      b = round(1.75*(n^(1/3)))
    endif
    scalar prob = 1/(1+b)
    start_v = ceil(muniform(n,1)*n)
    sizes=ceil(log(muniform(n,1))/log(1-prob))
    end_v=start_v+sizes
    x_b = {}
    loop i=1..(n-1)
      if end_v[i] &lt;= n
        x_b = x_b|x[start_v[i]:end_v[i],]
      else
        ebb=end_v[i]-n
        if ebb &lt;=n
          x_b = x_b|x[start_v[i]:n,]|x[1:ebb,]
        else
          x_b = x_b|x[start_v[i]:n,]|x[1:,]
        endif
      endif
    endloop
    x_b = x_b[1:n,]
  endif
endif
return x_b
</code>
</gretl-function>
<gretl-function name="SB_old2" type="matrix" private="1">
 <params count="2">
  <param name="x" type="matrix">
<description>Data to be resampled</description>
  </param>
  <param name="b" type="int" min="0">
<description>Block size</description>
  </param>
 </params>
<code>scalar n = rows(x)
if n == 0
  funcerr &quot;data input error, check data&quot;
endif
if b==0
  b = round(1.75*(n^(1/3)))
endif
matrix mx = x | x
matrix u = zeros(n,1)
u[1] = ceil(n*randgen1(u,0,1))
loop t=2..n
  if randgen1(u,0,1)&lt;1/b
    u[t] = ceil(n*randgen1(u,0,1))
  else
    u[t] = u[t-1] + 1
  endif
endloop
return mx[u,]
</code>
</gretl-function>
<sample-script>
clear
set verbose off
include SB.gfn

# load Johansen macroeconomic data
open denmark.gdt
scalar NBOOT = 999		# no. of bootstrap iterations
# run OLS with real money as dependent variable, real income and bond
# rate as explanatory variables
list lx = LRY IBO
ols LRM 0 lx --simple
bhat = $coeff		# store coefficient vector
lrmh = $yhat		# store fitted values
uh = {$uhat}		# store residuals as matrix

# Construct bootstrap pseudo-data using rule-of-thumb block size,
# estimate model NBOOT times and store estimated coefficients in the matrix bb
matrix bb = zeros(NBOOT, $ncoeff)

loop boot=1..NBOOT
    matrix ub = SB(uh)	# resample
    series ubs =ub
    series lrmb =lrmh+ubs
    # Note that since ubs is guaranteed to be stationary lrmb and lx
    # cointegrate by construction. With the block bootstrap this is not
    # true, and some of the NBOOT regressions of lrmb on lx may be spurious
    ols lrmb 0 lx --quiet
    bb[boot,] = $coeff'
endloop

# take percentiles of distribution of bootstrap estimates
matrix bb05 = quantile(bb, 0.05)
matrix bb95 = quantile(bb, 0.95)
print &quot;&quot;
print &quot;***************************************************************** &quot;
print &quot;&quot;
printf &quot;estimated coefficients %10.2f&quot;, bhat'
print &quot;&quot;
print &quot;95% bootstrap confidence intervals&quot;
print &quot;&quot;
printf &quot;Lower limits %15.2f&quot;, bb05
printf &quot;Upper limits %15.2f&quot;, bb95
print &quot;&quot;
print &quot;***************************************************************** &quot;
</sample-script>
</gretl-function-package>
</gretl-functions>
