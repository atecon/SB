function matrix SB_old1 (matrix x " data to be resampled",
                         scalar b "block size")
    n=rows(x)

    if n <= 0
        funcerr "data input error, check data"
    else
        if b < 0
            funcerr "block input error, check mean block size"
        else

            if b==0
                b = round(1.75*(n^(1/3)))
            endif
            scalar prob = 1/(1+b)

            start_v = ceil(muniform(n,1)*n)
            sizes=ceil(log(muniform(n,1))/log(1-prob))
            end_v=start_v+sizes
            x_b = {}

            loop for i=1..(n-1) --quiet
                if end_v[i] <= n
                    x_b = x_b|x[start_v[i]:end_v[i],]
                else
                    ebb=end_v[i]-n
                    if ebb <=n
                        x_b = x_b|x[start_v[i]:n,]|x[1:ebb,]
                    else
                        x_b = x_b|x[start_v[i]:n,]|x[1:,]
                    endif
                endif
            endloop

            x_b = x_b[1:n,]
        endif
    endif
    return x_b
end function

function matrix SB_old2 (matrix x "Data to be resampled",
                         int b[0::] "Block size")
    scalar n = rows(x)
    if n == 0
        funcerr "data input error, check data"
    endif
    if b==0
        b = round(1.75*(n^(1/3)))
    endif
    matrix mx = x | x
    matrix u = zeros(n,1)

    u[1] = ceil(n*randgen1(u,0,1))
    loop t=2..n -q
        if randgen1(u,0,1)<1/b
            u[t] = ceil(n*randgen1(u,0,1))
        else
            u[t] = u[t-1] + 1
        endif
    endloop
    return mx[u,]
end function

function matrix SB (matrix x "Data to be resampled",
                    int b[0::0] "Block size",
                    int iterations[1::1])
    scalar n = rows(x)
    if n == 0
        funcerr "data input error, check data"
    endif
    if b==0
        b = round(1.75*(n^(1/3)))
    endif
    p = 1/b
    s = seq(1,n)'
    u = 1 | (muniform(n-1,1) .< p)
    r = cum(u)
    nr = r[n]
    sub = selifr(r ~ s, u)
    sub[,2] -= mrandgen(i, 1, n, nr, 1)

    s -= replace(r, sub[,1], sub[,2])

    s = ((s-1)%n) + 1
    return x[s,]
end function
